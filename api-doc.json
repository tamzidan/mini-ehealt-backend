openapi: 3.0.3
info:
  title: Doctor Booking API
  description: |
    API untuk sistem booking konsultasi dokter online. 
    
    API ini menyediakan endpoints untuk:
    - Mengelola data dokter dan spesialisasi
    - Melihat jadwal praktik dokter
    - Membuat dan mengelola booking konsultasi
    - Tracking status booking
    
    ## Authentication
    Beberapa endpoint memerlukan authentication menggunakan Bearer token.
    
    ## Rate Limiting
    - Public endpoints: 100 requests/minute
    - Booking endpoints: 10 requests/minute
    - Admin endpoints: 1000 requests/minute
    
  version: '1'
  contact:
    name: API Support
    email: support@yourdomain.com
    url: https://yourdomain.com/support
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.yourdomain.com/v1
    description: Production server
  - url: https://staging-api.yourdomain.com/v1
    description: Staging server
  - url: http://localhost:3000/v1
    description: Development server

tags:
  - name: doctors
    description: Operations about doctors
  - name: schedules
    description: Doctor schedules and availability
  - name: bookings
    description: Booking management
  - name: admin
    description: Admin operations

paths:
  /doctors:
    get:
      tags:
        - doctors
      summary: Get all doctors
      description: Retrieve a list of all available doctors with optional filtering
      parameters:
        - name: category
          in: query
          description: Filter by doctor category
          required: false
          schema:
            type: string
            enum: [UMUM, GIGI, MATA, KULIT, JANTUNG, ANAK]
        - name: location
          in: query
          description: Filter by location
          required: false
          schema:
            type: string
        - name: available
          in: query
          description: Filter only available doctors
          required: false
          schema:
            type: boolean
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Doctor'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

  /doctors/{id}:
    get:
      tags:
        - doctors
      summary: Get doctor by ID
      description: Retrieve detailed information about a specific doctor
      parameters:
        - name: id
          in: path
          description: Doctor ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/DoctorDetail'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /doctors/{id}/schedule:
    get:
      tags:
        - schedules
      summary: Get doctor schedule
      description: Retrieve the schedule and available time slots for a specific doctor
      parameters:
        - name: id
          in: path
          description: Doctor ID
          required: true
          schema:
            type: integer
            format: int64
        - name: startDate
          in: query
          description: Start date (YYYY-MM-DD)
          required: false
          schema:
            type: string
            format: date
            example: "2025-08-01"
        - name: endDate
          in: query
          description: End date (YYYY-MM-DD)
          required: false
          schema:
            type: string
            format: date
            example: "2025-08-07"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DoctorSchedule'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /bookings:
    post:
      tags:
        - bookings
      summary: Create new booking
      description: Create a new booking for a doctor consultation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingRequest'
            examples:
              basic_booking:
                summary: Basic booking example
                value:
                  doctorId: 1
                  doctorName: "Dr. Ahmad Wijaya, Sp.PD"
                  date: "2025-08-01"
                  time: "08:00"
                  price: "Rp 150.000"
                  patientName: "John Doe"
                  patientPhone: "+6281234567890"
                  patientEmail: "john.doe@email.com"
                  notes: "Keluhan sakit perut"
      responses:
        '201':
          description: Booking created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Booking berhasil dibuat"
                  data:
                    $ref: '#/components/schemas/BookingResponse'
        '400':
          description: Bad request - Invalid data or time slot not available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                invalid_data:
                  summary: Invalid request data
                  value:
                    success: false
                    error:
                      code: "VALIDATION_ERROR"
                      message: "Invalid request data"
                      details: "patientEmail is required"
                time_not_available:
                  summary: Time slot not available
                  value:
                    success: false
                    error:
                      code: "INVALID_TIME_SLOT"
                      message: "Time slot not available"
                      details: "The selected time slot is no longer available"
        '409':
          description: Conflict - Time slot already booked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                error:
                  code: "ALREADY_BOOKED"
                  message: "Time slot already booked"
                  details: "This time slot has been booked by another patient"
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalError'

    get:
      tags:
        - bookings
      summary: Get patient bookings
      description: Retrieve bookings for a specific patient
      parameters:
        - name: email
          in: query
          description: Patient email (required if not authenticated)
          required: false
          schema:
            type: string
            format: email
        - name: phone
          in: query
          description: Patient phone number
          required: false
          schema:
            type: string
        - name: status
          in: query
          description: Filter by booking status
          required: false
          schema:
            type: string
            enum: [confirmed, pending, cancelled]
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/BookingSummary'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

  /bookings/{id}:
    get:
      tags:
        - bookings
      summary: Get booking by ID
      description: Retrieve details of a specific booking
      parameters:
        - name: id
          in: path
          description: Booking ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/BookingResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /bookings/{id}/status:
    patch:
      tags:
        - bookings
        - admin
      summary: Update booking status
      description: Update the status of a booking (admin/doctor only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Booking ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [confirmed, pending, cancelled]
                  description: New booking status
                reason:
                  type: string
                  description: Reason for status change (required for cancellation)
            examples:
              confirm_booking:
                summary: Confirm booking
                value:
                  status: "confirmed"
              cancel_booking:
                summary: Cancel booking
                value:
                  status: "cancelled"
                  reason: "Patient requested cancellation"
      responses:
        '200':
          description: Status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Status booking berhasil diperbarui"
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 123
                      status:
                        type: string
                        example: "cancelled"
                      updatedAt:
                        type: string
                        format: date-time
                        example: "2025-07-31T11:00:00Z"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication

  schemas:
    Doctor:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "Dr. Ahmad Wijaya, Sp.PD"
        category:
          type: string
          enum: [UMUM, GIGI, MATA, KULIT, JANTUNG, ANAK]
          example: "UMUM"
        location:
          type: string
          example: "RS Siloam Jakarta"
        schedule:
          type: string
          example: "Senin - Jumat, 08:00-16:00"
        rating:
          type: number
          format: float
          minimum: 0
          maximum: 5
          example: 4.8
        price:
          type: string
          example: "Rp 150.000"
        image:
          type: string
          format: uri
          nullable: true
          example: "https://example.com/doctor1.jpg"
        specialty:
          type: string
          nullable: true
          example: "Penyakit Dalam"
        experience:
          type: integer
          nullable: true
          example: 8

    DoctorDetail:
      allOf:
        - $ref: '#/components/schemas/Doctor'
        - type: object
          properties:
            description:
              type: string
              example: "Dokter spesialis penyakit dalam dengan pengalaman 8 tahun..."
            education:
              type: array
              items:
                type: string
              example: ["S1 Kedokteran UI", "Sp.PD RSCM"]
            languages:
              type: array
              items:
                type: string
              example: ["Indonesia", "English"]

    DoctorSchedule:
      type: object
      properties:
        date:
          type: string
          format: date
          example: "2025-08-01"
        timeSlots:
          type: array
          items:
            $ref: '#/components/schemas/TimeSlot'

    TimeSlot:
      type: object
      properties:
        time:
          type: string
          pattern: '^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$'
          example: "08:00"
        available:
          type: boolean
          example: true
        price:
          type: string
          example: "Rp 150.000"

    BookingRequest:
      type: object
      required:
        - doctorId
        - doctorName
        - date
        - time
        - price
        - patientName
        - patientPhone
        - patientEmail
      properties:
        doctorId:
          type: integer
          format: int64
          example: 1
        doctorName:
          type: string
          example: "Dr. Ahmad Wijaya, Sp.PD"
        date:
          type: string
          format: date
          example: "2025-08-01"
        time:
          type: string
          pattern: '^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$'
          example: "08:00"
        price:
          type: string
          example: "Rp 150.000"
        patientName:
          type: string
          example: "John Doe"
        patientPhone:
          type: string
          example: "+6281234567890"
        patientEmail:
          type: string
          format: email
          example: "john.doe@email.com"
        notes:
          type: string
          nullable: true
          example: "Keluhan sakit perut"

    BookingResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123
        bookingId:
          type: string
          example: "BK-2025080100123"
        status:
          type: string
          enum: [confirmed, pending, cancelled]
          example: "confirmed"
        createdAt:
          type: string
          format: date-time
          example: "2025-07-31T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-07-31T10:30:00Z"
        doctorId:
          type: integer
          format: int64
          example: 1
        doctorName:
          type: string
          example: "Dr. Ahmad Wijaya, Sp.PD"
        date:
          type: string
          format: date
          example: "2025-08-01"
        time:
          type: string
          example: "08:00"
        price:
          type: string
          example: "Rp 150.000"
        patientName:
          type: string
          example: "John Doe"
        patientPhone:
          type: string
          example: "+6281234567890"
        patientEmail:
          type: string
          format: email
          example: "john.doe@email.com"
        notes:
          type: string
          nullable: true
          example: "Keluhan sakit perut"

    BookingSummary:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123
        bookingId:
          type: string
          example: "BK-2025080100123"
        status:
          type: string
          enum: [confirmed, pending, cancelled]
          example: "confirmed"
        createdAt:
          type: string
          format: date-time
          example: "2025-07-31T10:30:00Z"
        doctorName:
          type: string
          example: "Dr. Ahmad Wijaya, Sp.PD"
        date:
          type: string
          format: date
          example: "2025-08-01"
        time:
          type: string
          example: "08:00"
        price:
          type: string
          example: "Rp 150.000"

    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 20
        total:
          type: integer
          example: 50
        totalPages:
          type: integer
          example: 3

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            code:
              type: string
              example: "VALIDATION_ERROR"
            message:
              type: string
              example: "Invalid request data"
            details:
              type: string
              nullable: true
              example: "patientEmail is required"

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error:
              code: "VALIDATION_ERROR"
              message: "Invalid request parameters"

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error:
              code: "UNAUTHORIZED"
              message: "Authentication required"

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error:
              code: "FORBIDDEN"
              message: "Access denied"

    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error:
              code: "NOT_FOUND"
              message: "Resource not found"

    UnprocessableEntity:
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error:
              code: "VALIDATION_ERROR"
              message: "Validation failed"
              details: "Invalid email format"

    InternalError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error:
              code: "INTERNAL_ERROR"
              message: "Internal server error"